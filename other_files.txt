//ARCHIVO CON CODIGO QUE NO SE SUBE A GIT PORQUE HACEN PARTE DEL VENDOR//
{{-- Esto es para Fácil Work
    <div class="w-1/2 p-4 m-auto text-justify">
    <div class="mb-10">
        <h2 class="text-3xl font-semibold text-center">Servicios de Mantenimiento y Reparaciones</h2>
    </div>
    <div class="flex">
        <div class="flex flex-col justify-center">
            <svg class="w-20 h-20 text-blue-500" viewBox="0 0 24 24" fill="none" stroke="currentColor"
                stroke-linecap="round" stroke-linejoin="round">
                <path
                    d="M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z" />
            </svg>
        </div>
        <div>
            <h1 class="font-mono text-2xl">Servicios de Fontanería</h1>
            <p>Nuestro equipo de expertos en fontanería está listo para mantener y reparar cualquier sistema de tuberías
                en tu almacén o empresa. Garantizamos un flujo de agua sin problemas y la detección y reparación de
                posibles fugas.</p>
        </div>

        <div class="flex flex-col justify-center">
            <svg class="w-20 h-20 text-blue-500" width="24" height="24" viewBox="0 0 24 24"
                stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                <path stroke="none" d="M0 0h24v24H0z" />
                <path d="M7 7h10v6a3 3 0 0 1 -3 3h-4a3 3 0 0 1 -3 -3v-6" />
                <line x1="9" y1="3" x2="9" y2="7" />
                <line x1="15" y1="3" x2="15" y2="7" />
                <path d="M12 16v2a2 2 0 0 0 2 2h3" />
            </svg>
        </div>
        <div>
            <h1 class="font-mono text-2xl">Servicios Eléctricos</h1>
            <p>Nuestros expertos electricistas están capacitados para mantener y reparar sistemas eléctricos en tu
                almacén. Garantizamos una distribución de energía confiable y segura, y estamos disponibles para
                solucionar cualquier problema eléctrico.</p>
        </div>

        <div class="flex flex-col justify-center">
            <svg class="w-20 h-20 text-blue-500" width="24" height="24" viewBox="0 0 24 24"
                stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                <path stroke="none" d="M0 0h24v24H0z" />
                <rect x="5" y="3" width="14" height="6" rx="2" />
                <path d="M19 6h1a2 2 0 0 1 2 2a5 5 0 0 1 -5 5l-5 0v2" />
                <rect x="10" y="15" width="4" height="6" rx="1" />
            </svg>
        </div>
        <div>
            <h1 class="font-mono text-2xl">Servicios de Pintura</h1>
            <p>Nuestro equipo de pintores profesionales está disponible para renovar y mantener la apariencia de tu
                almacén. Utilizamos los mejores materiales y técnicas para asegurar un acabado duradero y de alta
                calidad.</p>
        </div>
    </div>
</div> --}}


Esto es para poder registrar las peticiones si no se esta logeado

=============== se hace en vendor/laravel/fortify/src/http/controller/AuthenticatedSessionController.php ======================
<?php

namespace Laravel\Fortify\Http\Controllers;

use App\Models\JobRequest as JobRequestModel;
use App\Models\JobRequestImage;
use Illuminate\Contracts\Auth\StatefulGuard;
use Illuminate\Http\Request;
use Illuminate\Routing\Controller;
use Illuminate\Routing\Pipeline;
use Laravel\Fortify\Actions\AttemptToAuthenticate;
use Laravel\Fortify\Actions\CanonicalizeUsername;
use Laravel\Fortify\Actions\EnsureLoginIsNotThrottled;
use Laravel\Fortify\Actions\PrepareAuthenticatedSession;
use Laravel\Fortify\Actions\RedirectIfTwoFactorAuthenticatable;
use Laravel\Fortify\Contracts\LoginResponse;
use Laravel\Fortify\Contracts\LoginViewResponse;
use Laravel\Fortify\Contracts\LogoutResponse;
use Laravel\Fortify\Features;
use Laravel\Fortify\Fortify;
use Laravel\Fortify\Http\Requests\LoginRequest;

class AuthenticatedSessionController extends Controller
{
    /**
     * The guard implementation.
     *
     * @var \Illuminate\Contracts\Auth\StatefulGuard
     */
    protected $guard;

    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct(StatefulGuard $guard)
    {
        $this->guard = $guard;
    }

    /**
     * Show the login view.
     */
    public function create(Request $request): LoginViewResponse
    {
        return app(LoginViewResponse::class);
    }

    /**
     * Attempt to authenticate a new session.
     *
     * @return mixed
     */
    public function store(LoginRequest $request)
    {
        return $this->loginPipeline($request)->then(function ($request) {
            $response = app(LoginResponse::class);

            // Verifica si hay datos de Job Request en la sesión
            $jobRequestData = $request->session()->get('job_request_data');

            if ($jobRequestData) {
                $jobRequest = new JobRequestModel([
                    'user_id'      => auth()->user()->id,
                    'category_id'  => $jobRequestData['category'],
                    'skill_id'     => $jobRequestData['skill'],
                    'description'  => $jobRequestData['description'],
                    'location'     => $jobRequestData['location'],
                    'place'        => $jobRequestData['place'],
                    'tools'        => $jobRequestData['tools'],
                    'image'        => $jobRequestData['image'],
                    'date'         => $jobRequestData['date'],
                    'address'      => $jobRequestData['address'],
                ]);
                $jobRequest->save();
                if ($jobRequestData['image'] === "Si") {

                    foreach ($jobRequestData['imagePaths'] as $path) {
                        $jobRequestImage = new JobRequestImage([
                            'job_request_id' => $jobRequest->id,
                            'image_path' => $path,
                        ]);
                        $jobRequestImage->save();
                    }
                }
                // Limpia los datos almacenados en la sesión
                $request->session()->forget('job_request_data');
            }

            return redirect()->route('list-job-request');
        });
    }

    /**
     * Get the authentication pipeline instance.
     *
     * @return \Illuminate\Pipeline\Pipeline
     */
    protected function loginPipeline(LoginRequest $request)
    {
        if (Fortify::$authenticateThroughCallback) {
            return (new Pipeline(app()))->send($request)->through(array_filter(
                call_user_func(Fortify::$authenticateThroughCallback, $request)
            ));
        }

        if (is_array(config('fortify.pipelines.login'))) {
            return (new Pipeline(app()))->send($request)->through(array_filter(
                config('fortify.pipelines.login')
            ));
        }

        return (new Pipeline(app()))->send($request)->through(array_filter([
            config('fortify.limiters.login') ? null : EnsureLoginIsNotThrottled::class,
            config('fortify.lowercase_usernames') ? CanonicalizeUsername::class : null,
            Features::enabled(Features::twoFactorAuthentication()) ? RedirectIfTwoFactorAuthenticatable::class : null,
            AttemptToAuthenticate::class,
            PrepareAuthenticatedSession::class,
        ]));
    }

    /**
     * Destroy an authenticated session.
     */
    public function destroy(Request $request): LogoutResponse
    {
        $this->guard->logout();

        if ($request->hasSession()) {
            $request->session()->invalidate();
            $request->session()->regenerateToken();
        }

        return app(LogoutResponse::class);
    }
}

Esto es para poder registrar las peticiones si no se esta registrado en el sistema, te pide que te registres y luego crea la job_request
=============== se hace en vendor/laravel/fortify/src/http/controller/RegisteredUserController.php ======================
<?php

namespace Laravel\Fortify\Http\Controllers;

use App\Models\JobRequest as JobRequestModel;
use App\Models\JobRequestImage;
use Illuminate\Auth\Events\Registered;
use Illuminate\Contracts\Auth\StatefulGuard;
use Illuminate\Http\Request;
use Illuminate\Routing\Controller;
use Illuminate\Support\Str;
use Laravel\Fortify\Contracts\CreatesNewUsers;
use Laravel\Fortify\Contracts\RegisterResponse;
use Laravel\Fortify\Contracts\RegisterViewResponse;
use Laravel\Fortify\Fortify;

class RegisteredUserController extends Controller
{
    /**
     * The guard implementation.
     *
     * @var \Illuminate\Contracts\Auth\StatefulGuard
     */
    protected $guard;

    /**
     * Create a new controller instance.
     *
     * @param  \Illuminate\Contracts\Auth\StatefulGuard  $guard
     * @return void
     */
    public function __construct(StatefulGuard $guard)
    {
        $this->guard = $guard;
    }

    /**
     * Show the registration view.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Laravel\Fortify\Contracts\RegisterViewResponse
     */
    public function create(Request $request): RegisterViewResponse
    {
        return app(RegisterViewResponse::class);
    }

    /**
     * Create a new registered user.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Laravel\Fortify\Contracts\CreatesNewUsers  $creator
     * @return \Laravel\Fortify\Contracts\RegisterResponse
     */
    public function store(
        Request $request,
        CreatesNewUsers $creator
    ) {
        if (config('fortify.lowercase_usernames')) {
            $request->merge([
                Fortify::username() => Str::lower($request->{Fortify::username()}),
            ]);
        }

        event(new Registered($user = $creator->create($request->all())));

        $jobRequestData = $request->session()->get('job_request_data'); // Verifica si hay datos de Job Request en la sesión

        if ($jobRequestData) {
            $jobRequest = new JobRequestModel([
                'user_id'      => $user->id,
                'category_id'  => $jobRequestData['category'],
                'skill_id'     => $jobRequestData['skill'],
                'description'  => $jobRequestData['description'],
                'location'     => $jobRequestData['location'],
                'place'        => $jobRequestData['place'],
                'tools'        => $jobRequestData['tools'],
                'image'        => $jobRequestData['image'],
                'date'         => $jobRequestData['date'],
                'address'      => $jobRequestData['address'],
            ]);
            $jobRequest->save();
            if ($jobRequestData['image'] === "Si") {
                foreach ($jobRequestData['imagePaths'] as $path) {
                    $jobRequestImage = new JobRequestImage([
                        'job_request_id' => $jobRequest->id,
                        'image_path'     => $path,
                    ]);
                    $jobRequestImage->save();
                }
            }

            $request->session()->forget('job_request_data'); // Limpia los datos almacenados en la sesión

            $this->guard->login($user); // Autentica al usuario antes de redirigir

            return redirect()->route('list-job-request'); // Redirige al usuario a la página deseada

        } else {
            $this->guard->login($user);

            return app(RegisterResponse::class);
        }
    }
}
